/*
* This class can be used to access methods in theCampaignsSelector And CampaignsServiceImpl
*/
global With sharing class CampaignService {	

	private static CampaignService instance;
	private static boolean allowConstruct = False;

	// throws error if attempted to access instance through constructor
	global CampaignService(){
		if (!allowConstruct){
			throw New SingletonException();
		}
	}

	/*
	* Output: CampaignService -instance of the class 
	* Description: This method allows the Object To be accessed from 
	* 	a static context, And allows instance methods to be called on it
	*/
	global static CampaignService getInstance(){
		if (instance == null){
            allowConstruct = True;
            instance = New CampaignService();
            allowConstruct = False;
        }             
        return instance;
    }
	/*
	* Output: CampaignService -instance of the class 
	* Description: This method allows the Object To be accessed from 
	* 	a static context, And allows instance methods to be called on it
	*/
	@TestVisible
	private static void setMock(CampaignService i){
		instance = i;
	}

	/*
    * Description: 
    *   This method provides access to the selectTopLevelVolunteerCampaigns in the CampaignsSelector, And
    *   has identical inputs And outputs
    */
    global List<CampaignDTO> getTopLevelVolunteerCampaigns() {
        return service().getTopLevelVolunteerCampaigns();
    }
    
    /*
    * Description
    *	This method provides access to the selectTopLevelVolunteerCampaignsForProcessing in the campaignsSelector.
    */
    global List<Campaign> getTopLevelVolunteerCampaignsForProcessing() {
    	return service().getTopLevelVolunteerCampaignsForProcessing();    	
    }
    
    /*
    * Description
    *	This method provides access to the service layer's setMongoId
    */
    global void setMongoIds(List<Campaign> updtCampaigns) {
    	service().setMongoIds(updtCampaigns);
    }

	/*
	* Output:
	* 	ICampaignsService - an instance of CampaignsServiceImpl cast as it's interface
	* Description:
	* 	This method provides access to CampaignsServiceImpl class defined in the app
	*/
	private ICampaignsService service() {
		return (ICampaignsService) App.Service.newInstance(ICampaignsService.Class);
	}

    /*
	* Output:
	* 	ICampaignsService - an instance of CampaignsSelector cast as it's interface
	* Description:
	* 	This method provides access to CampaignsSelector class defined in the app
	*/
	private ICampaignsSelector selector() {
		return CampaignsSelector.newInstance();
	}
	
	/*
	* Interface implemented by domain classes that support the ability to produce campaignDTOs
	*/
	public interface ISupportCampaignDTO 
	{
		void generate(CampaignDTOFactory campaignDTOFactory);
	}
	
	/*
	* Creates a list of CampaignDTO's so that the standard SOBject garbage will be stripped off when 
	* serializing to json for use in web services.
	*/
	public class CampaignDTOFactory {		
		/**
		* List of campaignDTO's generated by the factory
		**/
		public List<CampaignDTO> campaignDTOs {get; private set;}
		
		public CampaignDTOFactory(){
			this.CampaignDTOs = new List<CampaignDTO>();
		}
		
		/*
		* Converts a campaign object to a campaignDTO and adds to the list
		*/
		public void add(Campaign c){
			this.CampaignDTOs.add(new CampaignDTO(c));
		}
	}
	
	global class CampaignDTO {
		public string name;
		public string campaignId;
		public string description;
		public string logoUrl;
		
		public CampaignDTO(Campaign c) {
			this.name = c.name;
			this.campaignId = c.id;
			this.description = c.description;
			this.logoUrl = c.logoUrl__c;
		}
	}
}